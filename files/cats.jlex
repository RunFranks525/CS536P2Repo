import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    	idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%


DIGIT=        [0-9]

WHITESPACE =   [\040\t]

RESERVEDWORD = [(bool)|(int)|(void)|(true)|(false)|(struct)|(cin)|(cout)|(if)|(else)|(while)|(return)]

IDENTIFIER =   [((a-z)(A-Z)_)|((a-z)(A-Z)(0-9)_)*]

STRING =       [\"(\[^\n\"\/\]|(\\\[nt\'\"\?\\\]))*\"]

COMMENT =     [((//)\[^\n\]*\n)|((#)\[^\n\]*\n)]

SYMBOLS =      [\{|\}|\(|\)|;|,|\.|(<<)|(>>)|(\+\+)|(--)|\+|-|\*|/|!|(&&)|(\|\|)|(==)|(!=)|<|>|(<=)|(>=)|=]



%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{RESERVEDWORD} {
		String reservedWord = yytext().toString();
		Symbol S = null;
		TokenVal reservedWordToken = null;
		switch (reservedWord) {
		   case "bool":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.BOOL,  reservedWordToken);
			CharNum.num += yytext().length();	
			break;
		   case "int":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.INT,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "void":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.VOID,  reservedWordToken);
			CharNum.num += yytext().length();		
			break;
		   case "true":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.TRUE,  reservedWordToken);
			CharNum.num += yytext().length();	
			break;
		   case "false":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.FALSE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "struct":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.STRUCT,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "cin":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.CIN,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "cout":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.COUT,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "if":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.IF,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "else":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.ELSE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "while":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.BOOL,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "return":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RETURN,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   default:
			break;
		}
		return S;				
	}

{STRING}  {String val = yyText().toString();
		StrLitTokenVal strLitToken = new StrLitTokenVal(yyline+1, CharNum.num, val);
		Symbol S = new Symbol(sym.ID, strLitTokenVal);
		CharNum.num += yytext().length();
		return S;
	  }


{IDENTIFIER} {	
		String val = yyText().toString();
		IdTokenVal idToken = new IdTokenVal(yyline+1, CharNum.num, val);
		Symbol S = new Symbol(sym.ID, IdTokenVal);
		CharNum.num += yytext().length();
		return S;
	     }

{DIGIT}+  { 
            	int val = (new Integer(yytext())).intValue(); // if int overflows -- this may crash before the if check
		if((val > 0 && val <= Integer.MAX_VALUE) && (val < 0 && val >= Integer.MIN_VALUE)){
			ErrMsg.fatal(yyline+1, CharNum.num,
                         "integer overflow, exceeds " + Integer.MAX_VALUE);
            		CharNum.num += yytext().length();
		}
		IntLitTokenVal intLitToken = new IntLitTokenVal(yyline+1, CharNum.num, val);
            	Symbol S = new Symbol(sym.INTLITERAL,intLitToken);
            	CharNum.num += yytext().length();
            	return S;
          }

\n        { CharNum.num = 1; }



{WHITESPACE}+  { CharNum.num += yytext().length(); }


{COMMENT} { CharNum.num = 1; }


{SYMBOLS} { Symbol S = null;
	    TokenVal symbolToken; 
	    switch(reservedSymbol) {
		case "{":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LCURLY,  reservedWordToken);
			CharNum.num++;	
			break;
		case "}":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RCURLY,  reservedWordToken);
			CharNum.num++;
			break;
		case "(":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LPAREN,  reservedWordToken);
			CharNum.num++;		
			break;
		case ")":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RPAREN,  reservedWordToken);
			CharNum.num++;	
			break;
		case ";":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.SEMICOLON,  reservedWordToken);
			CharNum.num++;
			break;
		case ",":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.COMMA,  reservedWordToken);
			CharNum.num++;
		   	break;
		case ".":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.DOT,  reservedWordToken);
			CharNum.num++;
			break;
		case "<<": 
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.WRITE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case ">>": 
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.READ,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "++":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.PLUSPLUS,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "--":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.MINUSMINUS,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "+":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.PLUS,  reservedWordToken);
			CharNum.num++;
			break;
		case "-":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.MINUS,  reservedWordToken);
			CharNum.num++;
			break;
		case "*":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.TIMES,  reservedWordToken);
			CharNum.num++;
		   	break;
		case "/":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.DIVIDE,  reservedWordToken);
			CharNum.num++;
			break;
		case "!":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.NOT,  reservedWordToken);
			CharNum.num++;
			break;
		case "&&":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.AND,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "||":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.OR,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "==":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.ASSIGN,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "!=":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.NOTEQUALS,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "<":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LESS,  reservedWordToken);
			CharNum.num++;
		   	break;
		case ">":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.GREATER,  reservedWordToken);
			CharNum.num++;
			break;
		case "<=":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LESSEQ,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case ">=":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.GREATEREQ,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "=":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.EQUALS,  reservedWordToken);
			CharNum.num++;
			break;
		default:
			break;
	    }
            return S;
          }
<<<<<<< HEAD
    
=======
   
>>>>>>> symbols var resolved
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
          }
