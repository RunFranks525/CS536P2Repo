import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    	idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%
//-----------------------------------------------------------------------------------------------

DIGIT =        [0-9]
WHITESPACE =   [\040\t]
RESERVEDWORD = [(bool)|(int)|(void)|(true)|(false)|(struct)|(cin)|(cout)|(if)|(else)|(while)|(return)]
//TODO: regex for ID's (variable names)
IDENTIFIER =   []
//TODO: regex for valid String's
STRING =       []
//TODO: Comments macro
COMMENTS =     [((//)[^\n]*\n)|((#)[^\n]*\n)]
//TODO: Illegal Character macro
ILLEGALS =     []
//TODO: Check Expression
SYMBOLS =      [\{|\}|\(|\)|;|,|\.|(<<)|(>>)|(++)|(--)|\+|-|\*|/|!|(&&)|(\|\|)|(==)|(!=)|<|>|(<=)|(>=)|=]



%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%
//------------------------------------------------------------------------------------------------

//Pattern for Reserved Words
{RESERVEDWORD} {
		String reservedWord = yytext().toString();
		Symbol S = null;
		switch(reservedWord){
		   case "bool":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.BOOL,  reservedWordToken);
			CharNum.num += yytext().length();	
			break;
		   case "int":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.INT,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "void":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.VOID,  reservedWordToken);
			CharNum.num += yytext().length();		
			break:
		   case "true":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.TRUE,  reservedWordToken);
			CharNum.num += yytext().length();	
			break;
		   case "false":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.FALSE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "struct":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.STRUCT,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "cin":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.CIN,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "cout":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.COUT,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "if":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.IF,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "else":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.ELSE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "while":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.BOOL,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "return":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RETURN,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   default:
			break;
			
		}
		return S;				
	}

//Pattern for Identifiers (variable names)
{IDENTIFIER} {	
		String val = yyText().toString();
		IdTokenVal idToken = new IdTokenVal(yyline+1, CharNum.num, val);
		Symbol S = new Symbol(sym.ID, IdTokenVal);
		CharNum.num += yytext().length();
		return S;
	     }

//Pattern for String Literals (any sequence of 0 or more String characters)
{STRING}  {
		//TODO: Unterminated String Literals
		//TODO: Bad String Literals
		String val = yyText().toString();
		StrLitTokenVal strLitToken = new StrLitTokenVal(yyline+1, CharNum.num, val);
		Symbol S = new Symbol(sym.ID, strLitTokenVal);
		CharNum.num += yytext().length();
		return S;
	  }

//Pattern for Integer Literals (any sequence of 1 or more digits)
{DIGIT}+  { // TODO: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
	    //(Bad Integer Literals)
            	int val = (new Integer(yytext())).intValue();
		IntLitTokenVal intLitToken = new IntLitTokenVal(yyline+1, CharNum.num, val);
            	Symbol S = new Symbol(sym.INTLITERAL,intLitToken);
            	CharNum.num += yytext().length();
            	return S;
          }

\n        { CharNum.num = 1; }

//Pattern for Whitespace
{WHITESPACE}+  { CharNum.num += yytext().length(); }

//Pattern for Comments
{COMMENT} {
		String val = yytext().toString();
		TokenVal commentToken = new TokenVal(yyline+1, CharNum.num, val);
		Symbol symbol = new Symbol(sym.COMMENT, commentToken);
		CharNum.num += yytext().length();
		return symbol;
	  }

//Pattern for all one- or two-character symbols
{SYMBOLS} { Symbol S = null; 
	    switch(reservedSymbol){
		case "{":
			TokenVal symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LCURLY,  reservedWordToken);
			CharNum.num++;	
			break;
		case "}":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RCURLY,  reservedWordToken);
			CharNum.num++;
			break;
		case "(":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LPAREN,  reservedWordToken);
			CharNum.num++;		
			break:
		case ")":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RPAREN,  reservedWordToken);
			CharNum.num++;	
			break;
		case ";":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.SEMICOLON,  reservedWordToken);
			CharNum.num++;
			break;
		case ",":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.COMMA,  reservedWordToken);
			CharNum.num++;
		   	break;
		case ".":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.DOT,  reservedWordToken);
			CharNum.num++;
			break;
		case "<<": 
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.WRITE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case ">>": 
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.READ,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "++":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.PLUSPLUS,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "--":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.MINUSMINUS,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "+":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.PLUS,  reservedWordToken);
			CharNum.num++;
			break;
		case "-":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.MINUS,  reservedWordToken);
			CharNum.num++;
			break;
		case "*":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.TIMES,  reservedWordToken);
			CharNum.num++;
		   	break;
		case "/":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.DIVIDE,  reservedWordToken);
			CharNum.num++;
			break;
		case "!":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.NOT,  reservedWordToken);
			CharNum.num++;
			break;
		case "&&":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.AND,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "||":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.OR,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "==":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.ASSIGN,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case "!=":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.NOTEQUALS,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "<":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LESS,  reservedWordToken);
			CharNum.num++;
		   	break;
		case ">":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.GREATER,  reservedWordToken);
			CharNum.num++;
			break;
		case "<=":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LESSEQ,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		case ">=":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.GREATEREQ,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		case "=":
			TokenVal reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.EQUALS,  reservedWordToken);
			CharNum.num++;
			break;
		default:
			break;
	    }
            return S;
          }

//Pattern for Illegal Characters
{ILLEGALS}+ {
		ErrMsg.fatal("illegal character ignored: " + yytext());
		CharNum.num++;
	   }


//If we havent caught the token yet, program fails     
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
