import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    	idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%


DIGIT=        [0-9]

WHITESPACE =   [\040\t]

IDENTIFIER =   [((a-z)(A-Z)_)|((a-z)(A-Z)(0-9)_)*]

COMMENT =     [((//)\[^\n\]*\n)|((#)\[^\n\]*\n)]

SYMBOLS =      [\{|\}|\(|\)|;|,|\.|(<<)|(>>)|(\+\+)|(--)|\+|-|\*|/|!|(&&)|(\|\|)|(==)|(!=)|<|>|(<=)|(>=)|=]



%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

(bool)|(int)|(void)|(true)|(false)|(struct)|(cin)|(cout)|(if)|(else)|(while)|(return) {



		String reservedWord = yytext();

		Symbol S = null;
		TokenVal reservedWordToken = null;
		switch (reservedWord) {
		   case "bool":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.BOOL,  reservedWordToken);
			CharNum.num += yytext().length();	
			break;
		   case "int":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.INT,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "void":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.VOID,  reservedWordToken);
			CharNum.num += yytext().length();		
			break;
		   case "true":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.TRUE,  reservedWordToken);
			CharNum.num += yytext().length();	
			break;
		   case "false":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.FALSE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "struct":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.STRUCT,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "cin":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.CIN,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "cout":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.COUT,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "if":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.IF,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "else":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.ELSE,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   case "while":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.WHILE,  reservedWordToken);
			CharNum.num += yytext().length();
		   	break;
		   case "return":
			reservedWordToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RETURN,  reservedWordToken);
			CharNum.num += yytext().length();
			break;
		   default:
			break;
		}
		return S;				
	}

(\"([^\n\"\/\\]|(\\[nt\'\"\?\\]))*\")  {	
		String val = yytext();
		StrLitTokenVal strLitToken = new StrLitTokenVal(yyline+1, CharNum.num, val);
		Symbol S = new Symbol(sym.STRINGLITERAL, strLitToken);
		CharNum.num += yytext().length();
		return S;
	  }

(\"([^\n\"\/\\]|(\\[^nt\'\"\?\\\n]))*\")  {	
		ErrMsg.fatal(yyline+1, CharNum.num,
                         "string literal with bad escaped character ignored");
            		CharNum.num += yytext().length();
	  }

(\"([^\n\"\/\\]|(\\[^nt\'\"\?\\\n]))*(\n))  {	
		ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated string literal ignored");
            		CharNum.num += yytext().length();
	  }

(\"([^\n\"\/\\]|(\\[nt\'\"\?\\]))*(\n|\\))  {	
		ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated string literal with bad escaped character ignored");
            		CharNum.num += yytext().length();
	  }




([a-z]|[A-Z]|_)([a-z]|[A-Z]|[0-9]|_)* {	
		String val = yytext().toString();
		IdTokenVal idToken = new IdTokenVal(yyline+1, CharNum.num, val);
		Symbol S = new Symbol(sym.ID, idToken);
		CharNum.num += yytext().length();
		return S;
	     }

{DIGIT}+  {  
            	double bigVal = (new Double(yytext())).doubleValue();
			System.out.println("fuck you");
		if(bigVal > Integer.MAX_VALUE) {
			ErrMsg.warn(yyline+1, CharNum.num,
                         "integer overflow, exceeds " + Integer.MAX_VALUE);
            		CharNum.num += yytext().length();
		} else{
			System.out.println("fuck you");
			int val = (new Integer(yytext())).intValue();
			IntLitTokenVal intLitToken = new IntLitTokenVal(yyline+1, CharNum.num, val);
            		Symbol S = new Symbol(sym.INTLITERAL,intLitToken);
            		CharNum.num += yytext().length();
            		return S;
		}
          }

\n        { CharNum.num = 1; }



{WHITESPACE}+  { CharNum.num += yytext().length(); }


(((//)[^\n]*\n)|((#)[^\n]*\n)) { CharNum.num = 1; }


\{|\}|\(|\)|;|,|\.|(<<)|(>>)|(\+\+)|(--)|\+|-|\*|/|!|(&&)|(\|\|)|(==)|(!=)|<|>|(<=)|(>=)|= { 
	    String reservedSymbol = yytext().toString();
	    Symbol S = null;
	    TokenVal symbolToken = null; 
	    switch(reservedSymbol) {
		case "{":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LCURLY,  symbolToken);
			CharNum.num++;	
			break;
		case "}":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RCURLY,  symbolToken);
			CharNum.num++;
			break;
		case "(":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LPAREN,  symbolToken);
			CharNum.num++;		
			break;
		case ")":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.RPAREN,  symbolToken);
			CharNum.num++;	
			break;
		case ";":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.SEMICOLON,  symbolToken);
			CharNum.num++;
			break;
		case ",":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.COMMA,  symbolToken);
			CharNum.num++;
		   	break;
		case ".":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.DOT,  symbolToken);
			CharNum.num++;
			break;
		case "<<": 
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.WRITE,  symbolToken);
			CharNum.num += yytext().length();
			break;
		case ">>": 
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.READ,  symbolToken);
			CharNum.num += yytext().length();
		   	break;
		case "++":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.PLUSPLUS,  symbolToken);
			CharNum.num += yytext().length();
			break;
		case "--":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.MINUSMINUS,  symbolToken);
			CharNum.num += yytext().length();
		   	break;
		case "+":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.PLUS,  symbolToken);
			CharNum.num++;
			break;
		case "-":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.MINUS,  symbolToken);
			CharNum.num++;
			break;
		case "*":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.TIMES,  symbolToken);
			CharNum.num++;
		   	break;
		case "/":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.DIVIDE,  symbolToken);
			CharNum.num++;
			break;
		case "!":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.NOT,  symbolToken);
			CharNum.num++;
			break;
		case "&&":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.AND,  symbolToken);
			CharNum.num += yytext().length();
		   	break;
		case "||":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.OR,  symbolToken);
			CharNum.num += yytext().length();
			break;
		case "==":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.EQUALS,  symbolToken);
			CharNum.num += yytext().length();
		   	break;
		case "!=":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.NOTEQUALS,  symbolToken);
			CharNum.num += yytext().length();
			break;
		case "<":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LESS,  symbolToken);
			CharNum.num++;
		   	break;
		case ">":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.GREATER,  symbolToken);
			CharNum.num++;
			break;
		case "<=":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.LESSEQ,  symbolToken);
			CharNum.num += yytext().length();
		   	break;
		case ">=":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.GREATEREQ,  symbolToken);
			CharNum.num += yytext().length();
			break;
		case "=":
			symbolToken = new TokenVal(yyline+1, CharNum.num);
			S = new Symbol(sym.ASSIGN,  symbolToken);
			CharNum.num++;
			break;
		default:
			break;
	    }
            return S;
          }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
          }
